# Build .NET Core Full
# v2.0
# lucas.candemil@biz.com.br
#
parameters:
  # The name of project to build
  projectName: 
  # Feed where the package from
  feedName: 
  # SonarQube parameter
  apiName: $(Build.Repository.Name)
  # build in release or debug
  buildConfiguration: 
  # Variavel do dotnet
  DOTNET_VERSION: ''
  DOMAIN_CS_PROJ: ''

steps:
- script: |
  
    DOMAIN_CS_PROJ=$(find "$(Build.SourcesDirectory)" -type f -name "*.csproj" | grep "Domain")
    if [ -n "$DOMAIN_CS_PROJ" ]; then
      echo "Arquivo .csproj encontrado com 'domain' no nome: $DOMAIN_CS_PROJ"
      # Extrai a versão do .NET do arquivo .csproj
      DOTNET_VERSION=$(grep -oP '(?<=<TargetFramework>net)[0-9]+\.[0-9]+' "$DOMAIN_CS_PROJ")
      echo "Versão do .NET encontrada: $DOTNET_VERSION"
      echo "##vso[task.setvariable variable=DOTNET_VERSION]$DOTNET_VERSION"
    else
      echo "Nenhum arquivo .csproj encontrado com 'domain' no nome."
    fi

  displayName: 'Extrair versão do .NET'
   
- task: NuGetToolInstaller@1
  inputs:
    versionSpec: '6.1'
    checkLatest: false

- task: UseDotNet@2
  displayName: 'Use .NET Core sdk'
  inputs:
    packageType: 'sdk'
    version: '$(DOTNET_VERSION).x'
    includePreviewVersions: true

- task: NuGetCommand@2
  displayName: 'Nuget restore'
  inputs:
    command: 'restore'
    restoreSolution: '$(Build.SourcesDirectory)/**/*.sln'
    feedsToUse: 'select'
    vstsFeed: '${{ parameters.FeedName }}'
    noCache: false
    disableParallelProcessing: false

# 2. SonarQube Project preparation
- task: SonarQubePrepare@5
  inputs:
    SonarQube: 'SonarQube Azure'
    scannerMode: 'MSBuild'
    projectKey: '${{ parameters.apiName }}'
    projectName: '${{ parameters.apiName }}'
    extraProperties: 'sonar.branch.name=$(Build.SourceBranchName)'

# 3. Build the project using ProjectName parameter
- task: DotNetCoreCLI@2
  displayName: 'Build ${{ parameters.buildConfiguration }}'
  inputs:
    command: 'build'
    projects: '$(Build.SourcesDirectory)/**/*.csproj'
    arguments: '--configuration ${{ parameters.buildConfiguration }} --no-restore'

# 4. SonarQube Analyse
- task: SonarQubeAnalyze@5

# 5. Create a package to Publish 
- task: DotNetCoreCLI@2
  displayName: 'Publish'
  inputs:
    command: 'publish'
    publishWebProjects: true
    arguments: '--configuration ${{ parameters.buildConfiguration }} --output "$(build.artifactstagingdirectory)" --no-restore'
    workingDirectory: '$(System.DefaultWorkingDirectory)'

# 6. Publish package on Artifact staging directory
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'
    artifactName: 'drop'

# 7. Count Lines
- script: |
    total_lines=$(git ls-files | xargs cat | wc -l)
    echo "Total lines in the repository: $total_lines"
  displayName: 'Count Lines'
