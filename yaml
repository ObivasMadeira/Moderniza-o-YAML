# Build .NET Core
# v2.1
# lucas.candemil@biz.com.br
#
parameters:
  # Nome do projeto a ser construído
  projectName: 
  # Feed de onde vem o pacote
  feedName: 
  # Parâmetro do SonarQube
  apiName: $(Build.Repository.Name)
  # Configuração de construção (Release ou Debug)
  buildConfiguration: 'Release'
# Variável do dotnet
  DOTNET_VERSION: ''
  DOMAIN_CS_PROJ: ''

steps:
- script: |
    # Encontra todos os arquivos .csproj com "Domain" no nome
    DOMAIN_CS_PROJ=$(find "$(Build.SourcesDirectory)" -type f -name "*.csproj" | grep "Domain")
    
    # Se nenhum arquivo .csproj for encontrado na raiz, tente encontrar em subpastas
    if [ -z "$DOMAIN_CS_PROJ" ]; then
      DOMAIN_CS_PROJ=$(find "$(Build.SourcesDirectory)" -type f -name "*.csproj" -exec grep -l "Domain" {} +)
    fi

    # Se nenhum arquivo .csproj for encontrado com "Domain" no nome, procurar na pasta "Service"
    if [ -z "$DOMAIN_CS_PROJ" ]; then
      # Encontra todos os arquivos .csproj com "Service" no nome
      SERVICE_CS_PROJ=$(find "$(Build.SourcesDirectory)" -type f -name "*.csproj" | grep "Service")
    
      # Se nenhum arquivo .csproj for encontrado na raiz, tente encontrar em subpastas
      if [ -z "$SERVICE_CS_PROJ" ]; then
        SERVICE_CS_PROJ=$(find "$(Build.SourcesDirectory)" -type f -name "*.csproj" -exec grep -l "Service" {} +)
      fi

      if [ -n "$SERVICE_CS_PROJ" ]; then
        for proj_file in $SERVICE_CS_PROJ; do
          echo "Arquivo .csproj encontrado com 'service' no nome: $proj_file"
          DOTNET_VERSION=$(grep -oP '(?<=<TargetFramework>net)[0-9]+\.[0-9]+' "$proj_file")
          echo "Versão do .NET encontrada para $proj_file: $DOTNET_VERSION"
          echo "##vso[task.setvariable variable=DOTNET_VERSION]$DOTNET_VERSION"
        done
      else
        echo "Nenhum arquivo .csproj encontrado com 'service' no nome."
      fi
    else
      for proj_file in $DOMAIN_CS_PROJ; do
        echo "Arquivo .csproj encontrado com 'domain' no nome: $proj_file"
        DOTNET_VERSION=$(grep -oP '(?<=<TargetFramework>net)[0-9]+\.[0-9]+' "$proj_file")
        echo "Versão do .NET encontrada para $proj_file: $DOTNET_VERSION"
        echo "##vso[task.setvariable variable=DOTNET_VERSION]$DOTNET_VERSION"
      done
    fi
  displayName: 'Extrair versão do .NET'

  
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '$(DOTNET_VERSION).x'
  displayName: 'Use .NET SDK'


- task: NuGetToolInstaller@1
  inputs:
    versionSpec: '6.1.x' # Usar a versão mais recente
    checkLatest: true

- task: NuGetCommand@2
  displayName: 'NuGet restore'
  inputs:
    command: 'restore'
    restoreSolution: '$(Build.SourcesDirectory)/**/*.sln'
    feedsToUse: 'select'
    vstsFeed: '$(feedName)'
    noCache: false
    disableParallelProcessing: false

- task: SonarQubePrepare@5
  inputs:
    SonarQube: 'SonarQube Azure'
    scannerMode: 'MSBuild'
    projectKey: '${{ parameters.apiName }}'
    projectName: '${{ parameters.apiName }}'
    extraProperties: 'sonar.branch.name=$(Build.SourceBranchName)'

- task: DotNetCoreCLI@2
  displayName: 'Build'
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration) '

- task: DotNetCoreCLI@2
  displayName: 'Publish'
  inputs:
    command: 'publish'
    publishWebProjects: true
    arguments: '--configuration $(buildConfiguration) --output "$(build.artifactstagingdirectory)"'
    workingDirectory: '$(System.DefaultWorkingDirectory)'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'
    artifactName: 'drop'

- script: |
    total_lines=$(git ls-files | xargs cat | wc -l)
    echo "Total lines in the repository: $total_lines"
  displayName: 'Count Lines'
